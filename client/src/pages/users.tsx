import type { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import { logout, me } from '@/common/auth';
import { useQuery } from '@tanstack/react-query';
import { getUsers } from '@/common/users';
import { UserList } from '@/components';
import { User } from '@/model/user';
import Router from 'next/router';

interface Props {
  user: {
    id: string;
    email: string;
    name?: string;
  };
}

const UsersPage: NextPage<Props> = ({ user }) => {
  const { data, isLoading } = useQuery(['users'], getUsers);

  const handleLogout = async () => {
    await logout();
    Router.push('/');
  };

  return (
    <div>
      <Head>
        <title>Users</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="text-sm p-4">
        You are currently logged in as: {user.email}
      </div>
      <div className="flex flex-col items-center gap-4 py-5">
        <h1 className="text-xl">Users</h1>
        {isLoading ? (
          <div>loading ...</div>
        ) : (
          <UserList users={data?.data as User[]} />
        )}
        <button
          className="border rounded p-3 uppercase text-red-400 border-red-400"
          onClick={handleLogout}
        >
          Logout
        </button>
      </div>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const redirect = {
    redirect: {
      destination: '/login',
      permanent: false,
    },
  };

  try {
    const { data } = await me(req.headers.cookie);
    if (!data.id) {
      return redirect;
    }
    return { props: { user: data } };
  } catch (error) {
    return redirect;
  }
};

export default UsersPage;
